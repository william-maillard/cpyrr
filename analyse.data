PROG {

procedure p(a : int, b:int, d:float, e:char, f:bool) {
    begin
        printf("a = %d, b = %d, d = %f, e = %c ", a, b, d, e);
        if(f)then
        begin
            printf("f = true\n");
        end
        else
        begin
            printf("f = false\n");
        end
    end
};

function f(x:char) return char {
    begin
        return x;
    end
};
var a : bool;
var b : char;
var c : float;
var d : int;
begin
    a := true;
    b := 'b';
    c := 2.23;
    d := 0;

    p(d*3 + 4, d, c, f(b), (2 + 2 == 3));
end
}0 2 -1 S 7 -1 S 10 501 S 9 5 S N B N B 13 1 S N B N B 2 -1 S 7 -1 S 10 502 S 9 6 S N B N B 14 98 S N B N B 2 -1 S 7 -1 S 10 14 S 9 14 S N B N B 12 15 S N B N B 2 -1 S 7 -1 S 10 503 S 9 7 S N B N B 11 0 S N B N B 2 -1 S 36 4 S 4 -1 S 16 0 S 19 -1 S 21 -1 S 10 503 S 9 7 S N B N B 11 3 S N B N B 11 4 S N B N B N B 10 503 S 9 7 S N B N B 10 14 S 9 14 S N B N B 35 500 S 4 -1 S 10 502 S 9 6 S N B N B N B N B 18 0 S 31 -1 S 19 -1 S 11 2 S N B 11 2 S N B N B 11 3 S N B N B N B N B N B N B N B N B N B N B N 1 2 -1 S 34 -1 S 15 10 S N B 39 -1 S 10 5 S 9 5 S N B N B 10 6 S 9 6 S N B N B 10 7 S 9 7 S N B N B 10 8 S 9 8 S N B N B N B N B 2 -1 S 5 -1 S 10 9 S 9 9 S N B N B 2 -1 S 34 -1 S 15 11 S N B 39 -1 S N B N B N B 2 -1 S 34 -1 S 15 12 S N B 39 -1 S N B N B N B N B N B N B N 2 2 -1 S 3 2 S 10 13 S 9 13 S N B N B N B N B N ; 0 3 int -1 1 5 float -1 2 4 char -1 3 4 bool -1 4 1 p -1 5 1 a -1 6 1 b -1 7 1 d -1 8 1 e 15 9 1 f -1 10 33 "a = %d, b = %d, d = %f, e = %c " -1 11 12 "f = true\n" -1 12 13 "f = false\n" -1 13 1 x -1 14 1 c -1 15 4 2.23 -1; 0 2 -1 0 0 1 1 2 -1 0 0 1 2 2 -1 0 0 1 3 2 -1 0 0 1 4 -7 -1 0 0 1 5 5 501 1 0 2 6 5 502 1 0 3 7 5 503 1 1 4 8 5 -1 1 2 5 9 5 500 1 3 6 13 5 -1 2 2 2 14 5 -1 0 1 4 500 7 -1 0 16 2 501 5 -1 0 3 2 502 5 -1 0 2 3 503 5 -1 0 0 5; 504 ; 5 5 0 2 6 0 3 7 1 4 8 2 5 9 3 6 1 2 13 2 2; 6 0 7 1 3 1;PROG {
typedef type1 : struct {
    c1 : int;
    c2 : float;
    c3 : bool;
};
typedef type2 : struct {
    c1 : type1;
    c2 : type1;
};
typedef type3 : struct {
    c1 : type2;
};

typedef tab1 : array[-1..1, 3..10, -12..0] of type3;

function f() return int {
begin
    return 2;
end
};

var t : tab1;

begin
    t[1, 2 + 3, f()].c1.c1.c1 := 2;
end
}PROG {

var x : int;
var x : 10;
begin
    x := 2;
    x := 5 + 5;
    x := 10 10;
    x := 12;
end
}
PROG {

function f(x : int, y : float) return void  {
begin
end
};

begin
    f(2, 3);
end
}
PROG {

typedef s : struct {
    ch1 : int;
    ch1 : float;
    ch2 : t; // t pas accessible car declare apres
};

typedef t : array[1..10]of s;

var s : s;
var t : t;
var n : char;

begin
    s[2] := 0; // s pas un tableau
    s.inconnu := 1;
    t.ch1 := 0; // t pas une structure
    t[1].ch1 := 0; // ok
    n.ch1 := 'd';

    d := 3; // pas declaree
end
}
PROG {

function f() return int {
begin
    return 2;
end
};
function g() return float {
begin
    return 2.2;
end
};


typedef t : array[1..5, 1..3]of float;
var t : t;
begin
    t[1] := 0;
    t[1, 2, 3] := 0;
    t[1, f()] := 0.0;

    t[g(), 4] := 9.8;
end
}
PROG{
typedef t : array[1.
var x : int;.5] of int;
typedef s : struct {
    num : t;
    num : float; // variables de meme nom mais de types differents
};

typedef s1 : struct {
    a : int;
    b : char;
    c : s;
};
var elem : s1;
var elem2 : s;
var nombre : int;
// Fonction non-void qui ne retourne rien
function demande_nombre() return int{
var nombre : int;
begin
    printf("Entrez un nombre pair : ");
    scanf("%d",nombre);
end
};

// Procedure qui retourne quelque chose
procedure p(a:int) {
var i : float;
begin
    return a%5;
end
};

begin
    x:=5.5 + 5; // Affectation de float a un entier
    nombre = demande_nombre();
    p(); // Appel de la procedure sans parametre
    elem.c[1] := 8; // traitement d'une structure comme un tableau

    // variable non declaree
    while(i>0)
    begin
        // Affectation dans la condition au lieu d'une exp relationnelle
        if (nombre % 2 == 1) then
        begin
            printf("Le nombre %d %e devait etre pair\n",nombre);
            elem2.num := nombre % 0.0; //Division float par 0
        end
        else if(nombre % 2 == 0.0) then
        begin
            printf("Bravo, %d est pair\n",nombre);
            nombre := nombre/0; //Division par 0
        end
    end
end
}
PROG {

function fac(x:int) return int{
begin
    printf("..%d..\n", x);

    if(x == 0) then
    begin
        return 1;
        printf("ici\n");
    end
    else
    begin
        printf("ap if\n");
        return x * fac(x - 1);
    end

    return -1;
end
};

begin
    printf("factorielle : %d\n", fac(3));
end
}
0 2 -1 S 34 -1 S 15 9 S N B 39 -1 S 35 4 S 4 -1 S 11 3 S N B N B N B N B N B N B N 1 2 -1 S 34 -1 S 15 6 S N B 39 -1 S 10 5 S 9 5 S N B N B N B N B 2 -1 S 5 -1 S 18 0 S 31 -1 S 10 5 S 9 5 S N B N B 11 0 S N B N B N B 2 -1 S 3 0 S 11 1 S N B N B 2 -1 S 34 -1 S 15 7 S N B 39 -1 S N B N B N B N B N B 2 -1 S 34 -1 S 15 8 S N B 39 -1 S N B N B 2 -1 S 3 0 S 16 0 S 21 -1 S 10 5 S 9 5 S N B N B 35 4 S 4 -1 S 16 0 S 20 -1 S 10 5 S 9 5 S N B N B 11 1 S N B N B N B N B N B N B N B N B N B N B N B N B N ; 0 3 int -1 1 5 float -1 2 4 char -1 3 4 bool -1 4 3 fac -1 5 1 x -1 6 10 "..%d..\n" -1 7 7 "ici\n" -1 8 9 "ap if\n" -1 9 20 "factorielle : %d\n" -1; 0 2 -1 0 0 1 1 2 -1 0 0 1 2 2 -1 0 0 1 3 2 -1 0 0 1 4 7 -1 0 0 1 5 5 -1 1 0 2; 500 ; 1 0 5 0 2; 2 0 3 1;PROG {
begin
    printf("Hello World !\n");
end
}
0 2 -1 S 34 -1 S 15 4 S N B 39 -1 S N B N B N B N ; 0 3 int -1 1 5 float -1 2 4 char -1 3 4 bool -1 4 17 "Hello World !\n" -1; 0 2 -1 0 0 1 1 2 -1 0 0 1 2 2 -1 0 0 1 3 2 -1 0 0 1; 500 ;; 2 0;PROG {
var x : int; // portee globale

function x(x : float, z : char, r:int) return int {
begin
    printf("appel x(%f, %c, %d)\n", x, z, r);

    return 5;
end
};

procedure d() {
begin
    printf("procedure d()\n");
    x := 100; // modif le x global
end
};

procedure r() {
    procedure s() {
        var x : int; // masque la variable globale
        procedure t() {
            begin
                printf("procedure t()\n");
                x := -600; // modifie la variable x de s
            end
        };

        begin
            printf("procedure s() : x=%d\n", x);
        end
    };  
    begin
        s();
        printf("procedure r() : x=%d\n", x);
        x := x * 2;
    end
};

begin
    x := x(5.5, 'c', 5);
    printf("region 0,  x := %d\n", x);
    d();
    printf("region 0, x := %d\n", x);
    r();
    printf("region 0, x := %d\n", x);
end
}
PROG {
// definition des types :

typedef matrice : array[0..10, 0..10] of int;


// definition des variables :
var matrice : matrice;
var vide : char;
var joueur : char;
var x : int;
var y : int;
var mur : char;
var ennemi : char;
var nb_ennemis : int;

// definition des fonctions :
procedure place_murs(n : int) {
var i : int;
var j : int;
begin
    i := 0;
    printf("debut boucle\n");
    while(i <= n) begin
        matrice[i + 2, 0] := -1;
        matrice[10, i] := -1;
        matrice[7, i + 3] := -1;
        matrice[0, i + 2] := -1;
        matrice[i + 2, 4] := -1;
        matrice[i + 2, 8] := -1;
        i := i + 1;
    end
end
};

procedure place_ennemis() {
begin
    matrice[2, 3] := -2;
    matrice[6, 2] := -2;
    matrice[7, 0] := -2;

    nb_ennemis := 3;
end
};

procedure init() {
var i : int;
var j : int;
begin
    i := 0;
    while(i <= 10) begin
        j := 0;
        while(j <= 10) begin
            matrice[i, j] := 0;
            j := j + 1;
        end
        i := i + 1;
    end

    matrice[0, 0] := 1;
    vide := '.';
    joueur := 'H';
    mur := 'o';
    ennemi := 'E';
    place_murs(3);
    place_ennemis();
end
};


procedure affiche_matrice() {
var i : int;
var j : int;
begin
    printf("Il reste %d ennemis.\n", nb_ennemis);
    i := 0;
    while(i <= 10) begin
        j := 0;
        printf("|");
        while(j <= 10) begin
            if(matrice[i, j] == 0) then
            begin
                printf("%c |", vide);
            end
            else if(matrice[i, j] == -1) then
            begin
                printf("%c |", mur);
            end
            else if (matrice[i, j] == 1) then
            begin
                printf("%c |", joueur);
            end
            else
            begin
                printf("%c |", ennemi); 
            end
            j := j + 1;
        end
        printf("\n");
        i := i + 1;
    end
end
};

function jouer() return void {
var jouer : int;
var continue : bool;
begin
    continue := true;
    while(continue) begin
        printf("N(1) S(2) E(3) W(4) pour vous deplacer : ");
        scanf("%d", jouer);
        if(jouer == 1) then
            begin
            if(x - 1 > -1  &&  matrice[x- 1, y] == 0) then
            begin
                matrice[x, y] := 0;
                matrice[x- 1, y] := 1;
                continue := false;
                x := x - 1;
            end
            else if(x - 1 > -1  &&  matrice[x- 1, y] == -2) then
            begin
                matrice[x, y] := 0;
                matrice[x- 1, y] := 1;
                nb_ennemis := nb_ennemis - 1;
                continue := false;
                x := x - 1;
            end
        end
        else if(jouer == 2) then
        begin
            if(x + 1 < 11  &&  matrice[x+ 1, y] == 0) then
            begin
                matrice[x, y] := 0;
                matrice[x+ 1, y] := 1;
                continue := false;
                x := x + 1;
            end
            else if(x+ 1 < 11  &&  matrice[x+ 1, y] == -2) then
            begin
                matrice[x, y] := 0;
                matrice[x+ 1, y] := 1;
                nb_ennemis := nb_ennemis - 1;
                continue := false;
                x := x + 1;
            end
        end
        else if(jouer == 3) then
        begin
            if(y + 1 < 11  &&  matrice[x, y + 1] == 0) then
            begin
                matrice[x, y] := 0;
                matrice[x, y+ 1] := 1;
                continue := false;
                y := y + 1;
            end
            else if(y+ 1 < 11  &&  matrice[x, y + 1] == -2) then
            begin
                matrice[x, y] := 0;
                matrice[x, y + 1] := 1;
                nb_ennemis := nb_ennemis - 1;
                continue := false;
                y := y + 1;
            end
        end
        else if(jouer == 4) then
        begin
            if(y - 1 > -1  &&  matrice[x, y - 1] == 0) then
            begin
                matrice[x, y] := 0;
                matrice[x, y- 1] := 1;
                continue := false;
                y := y - 1;
            end
            else if(y- 1 > -1 &&  matrice[x, y- 1] == -2) then
            begin
                matrice[x, y] := 0;
                matrice[x, y - 1] := 1;
                nb_ennemis := nb_ennemis - 1;
                continue := false;
                y := y - 1;
            end
        end
        else 
        begin
            printf("Invalid Input !\n");
        end
    end
end
};

function fin() return bool {
begin
    return nb_ennemis == 0;
end
};

begin
init();
affiche_matrice();

while(!fin())
begin
    jouer();
    affiche_matrice();
end

printf("Victoire !!\n");         
end
}
PROG {
typedef renard : array[1..5] of int;
typedef prince : struct {
    roses : renard;
    planete : int;
};
var animal : renard;
var x : int;

procedure on() {

  procedure ne() {

    procedure voit() {
      var petit : prince;
      begin
        petit.roses[3] := 7;
      end
    }; // fin voit.
                 
    procedure bien() {
      begin
        voit();
      end
    }; // fin bien().
                    
    begin
      voit();
    end
  }; // fin ne().
         
  procedure qu() {
    begin
      ne();
    end
  }; 
          
  procedure avec() {
    begin
      qu();
    end
  };
          
  procedure le() {
  
    procedure coeur() {
      begin
        ne();
      end
    };

    procedure l() {
      begin
        avec();
      end
    };
            
    begin
      coeur();
    end
  }; // fin le().
          
  procedure essentiel() {
         
    procedure est() {
      var z : int;
      begin
        le(); z:=x;
      end
    };
                    
    procedure invisible(){
      var serpent : renard; var y : int;
      
      procedure pour() {
        procedure les() {
          begin
            le(); y:=x;
          end
        };
                
        begin
          les();
        end
      }; // fin pour()
                         
      begin
        serpent[1] := 99;
        pour();
        end
    }; //fin invisible();

    begin
      invisible();
    end
  }; // fin essentiel()

  procedure yeux() {
    begin
      essentiel();
    end
  };

  begin
    yeux();
  end
}; // fin on().


begin
 animal[1] := 77; x := 5;
 on();
end
}0 2 -1 S 7 -1 S 10 8 S 9 8 S N B 8 -1 S 11 1 S N B N B N B 11 77 S N B N B 2 -1 S 7 -1 S 10 9 S 9 9 S N B N B 11 5 S N B N B 2 -1 S 36 10 S 4 -1 S N B N B N B N B N B N 1 2 -1 S 36 28 S 4 -1 S N B N B N B N 2 2 -1 S 36 12 S 4 -1 S N B N B N B N 3 2 -1 S 7 -1 S 10 13 S 9 13 S N B 9 6 S N B 8 -1 S 11 3 S N B N B N B 11 7 S N B N B N B N 4 2 -1 S 36 12 S 4 -1 S N B N B N B N 5 2 -1 S 36 11 S 4 -1 S N B N B N B N 6 2 -1 S 36 15 S 4 -1 S N B N B N B N 7 2 -1 S 36 18 S 4 -1 S N B N B N B N 8 2 -1 S 36 11 S 4 -1 S N B N B N B N 9 2 -1 S 36 16 S 4 -1 S N B N B N B N 10 2 -1 S 36 23 S 4 -1 S N B N B N B N 11 2 -1 S 36 17 S 4 -1 S N B N B 2 -1 S 7 -1 S 10 22 S 9 22 S N B N B 10 9 S 9 9 S N B N B N B N B N B N 12 2 -1 S 7 -1 S 10 24 S 9 24 S N B 8 -1 S 11 1 S N B N B N B 11 99 S N B N B 2 -1 S 36 26 S 4 -1 S N B N B N B N B N 13 2 -1 S 36 27 S 4 -1 S N B N B N B N 14 2 -1 S 36 17 S 4 -1 S N B N B 2 -1 S 7 -1 S 10 25 S 9 25 S N B N B 10 9 S 9 9 S N B N B N B N B N B N 15 2 -1 S 36 20 S 4 -1 S N B N B N B N ; 0 3 int -1 1 5 float -1 2 4 char -1 3 4 bool -1 4 6 renard -1 5 6 prince 24 6 5 roses 19 7 7 planete -1 8 6 animal -1 9 1 x -1 10 2 on -1 11 2 ne -1 12 4 voit -1 13 5 petit 15 14 4 bien 18 15 2 qu 26 16 4 avec -1 17 2 le -1 18 5 coeur -1 19 1 l 20 20 9 essentiel 21 21 3 est -1 22 1 z -1 23 9 invisible -1 24 7 serpent -1 25 1 y -1 26 4 pour -1 27 3 les -1 28 4 yeux -1; 0 2 -1 0 0 1 1 2 -1 0 0 1 2 2 -1 0 0 1 3 2 -1 0 0 1 4 3 -1 0 0 5 5 -3 -1 0 4 6 8 5 -1 0 4 2 9 5 -1 0 0 7 10 -7 -1 0 11 1 11 -7 -1 1 12 2 12 -7 -1 2 13 3 13 5 -1 3 5 2 14 -7 -1 2 14 4 15 -7 -1 1 15 5 16 -7 -1 1 16 6 17 -7 -1 1 17 7 18 -7 -1 7 18 8 19 -7 -1 7 19 9 20 -7 -1 1 20 10 21 -7 -1 10 21 11 22 5 -1 11 0 2 23 -7 -1 10 22 12 24 5 -1 12 4 2 25 5 -1 12 0 7 26 -7 -1 12 23 13 27 -7 -1 13 24 14 28 -7 -1 1 25 15; 500 ; 1 0 1 5 2 6 4 0 7 0 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 8 0 2 1 2 2 8 3 2 3 2 2 2 2 2 2 2 3 2 3 2 2 3 3 8 3 2 4 2 5 2 2;PROG {
typedef renard : array[1..5] of int;
typedef prince : struct {
    roses : renard;
    planete : int;
};
var animal : renard;
var x : int;

function on(a:int,b:int) return int {

    procedure ne() {

    procedure voit() {
        var petit : prince;
        begin
        petit.roses[3] := 7;
        end
    }; // fin voit.

    procedure bien() {
        begin
        voit();
        end
    }; // fin bien().

    begin
        voit();
    end
    }; // fin ne().

  procedure qu() {
    begin
      ne();
    end
  }; 

  procedure avec() {
    begin
      qu();
    end
  };

  procedure le() {

    procedure coeur() {
      begin
        ne();
      end
    };

    procedure l() {
      begin
        avec();
      end
    };

    begin
      coeur();
    end
  }; // fin le().

  procedure essentiel() {
    var nombre : int;  
    function est() return int {
      var z : int;
      begin
        le(); z:=x;
        if(z % 2 == 0) then
        begin
          return z + 1;
        end
        return z;
      end
    };

    function invisible() return void{
      var serpent : renard; var y : int;

      procedure pour() {
        procedure les() {
          begin
            le(); y:=x;
          end
        };

        begin
          les();
        end
      }; // fin pour()

      begin
        serpent[1] := 99;
        printf("Le serpent 1 a une longueur de %d\n",serpent[1]);
        pour();
        end
    }; //fin invisible();

    begin
      nombre := est();
      invisible();
    end
  }; // fin essentiel()

  procedure yeux() {
    begin
      essentiel();
    end
  };

  begin
    yeux();
    return a+b;
  end
}; // fin on().

begin
    animal[1] := 77; x := 5;
    animal[2] := on(animal[1],x);
end
}
0 2 -1 S 7 -1 S 10 8 S 9 8 S N B 8 -1 S 11 1 S N B N B N B 11 77 S N B N B 2 -1 S 7 -1 S 10 9 S 9 9 S N B N B 11 5 S N B N B 2 -1 S 7 -1 S 10 8 S 9 8 S N B 8 -1 S 11 2 S N B N B N B 35 10 S 4 -1 S 10 8 S 9 8 S N B 8 -1 S 11 1 S N B N B N B 10 9 S 9 9 S N B N B N B N B N B N B N B N B N 1 2 -1 S 36 32 S 4 -1 S N B N B 2 -1 S 3 0 S 16 0 S 19 -1 S 10 11 S 9 11 S N B N B 10 12 S 9 12 S N B N B N B N B N B N B N B N 2 2 -1 S 36 14 S 4 -1 S N B N B N B N 3 2 -1 S 7 -1 S 10 15 S 9 15 S N B 9 6 S N B 8 -1 S 11 3 S N B N B N B 11 7 S N B N B N B N 4 2 -1 S 36 14 S 4 -1 S N B N B N B N 5 2 -1 S 36 13 S 4 -1 S N B N B N B N 6 2 -1 S 36 17 S 4 -1 S N B N B N B N 7 2 -1 S 36 20 S 4 -1 S N B N B N B N 8 2 -1 S 36 13 S 4 -1 S N B N B N B N 9 2 -1 S 36 18 S 4 -1 S N B N B N B N 10 2 -1 S 7 -1 S 10 23 S 9 23 S N B N B 35 24 S 4 -1 S N B N B N B 2 -1 S 35 26 S 4 -1 S N B N B N B N B N 11 2 -1 S 36 19 S 4 -1 S N B N B 2 -1 S 7 -1 S 10 25 S 9 25 S N B N B 10 9 S 9 9 S N B N B N B 2 -1 S 5 -1 S 18 0 S 31 -1 S 23 -1 S 10 25 S 9 25 S N B N B 11 2 S N B N B 11 0 S N B N B N B 2 -1 S 3 0 S 16 0 S 19 -1 S 10 25 S 9 25 S N B N B 11 1 S N B N B N B N B N B N B 2 -1 S 3 0 S 10 25 S 9 25 S N B N B N B N B N B N B N B N 12 2 -1 S 7 -1 S 10 27 S 9 27 S N B 8 -1 S 11 1 S N B N B N B 11 99 S N B N B 2 -1 S 34 -1 S 15 31 S N B 39 -1 S 10 27 S 9 27 S N B 8 -1 S 11 1 S N B N B N B N B N B 2 -1 S 36 29 S 4 -1 S N B N B N B N B N B N 13 2 -1 S 36 30 S 4 -1 S N B N B N B N 14 2 -1 S 36 19 S 4 -1 S N B N B 2 -1 S 7 -1 S 10 28 S 9 28 S N B N B 10 9 S 9 9 S N B N B N B N B N B N 15 2 -1 S 36 22 S 4 -1 S N B N B N B N ; 0 3 int -1 1 5 float -1 2 4 char -1 3 4 bool -1 4 6 renard -1 5 6 prince 11 6 5 roses 21 7 7 planete -1 8 6 animal -1 9 1 x -1 10 2 on 31 11 1 a 27 12 1 b 14 13 2 ne -1 14 4 voit -1 15 5 petit 17 16 4 bien 20 17 2 qu 29 18 4 avec -1 19 2 le -1 20 5 coeur -1 21 1 l 22 22 9 essentiel 24 23 6 nombre -1 24 3 est -1 25 1 z -1 26 9 invisible -1 27 7 serpent -1 28 1 y -1 29 4 pour -1 30 3 les -1 31 37 "Le serpent 1 a une longueur de %d\n" -1 32 4 yeux -1; 0 2 -1 0 0 1 1 2 -1 0 0 1 2 2 -1 0 0 1 3 2 -1 0 0 1 4 3 -1 0 0 5 5 -3 -1 0 4 6 8 5 -1 0 4 2 9 5 -1 0 0 7 10 7 -1 0 11 1 11 5 -1 1 0 2 12 5 -1 1 0 3 13 -7 -1 1 19 2 14 -7 -1 2 20 3 15 5 -1 3 5 2 16 -7 -1 2 21 4 17 -7 -1 1 22 5 18 -7 -1 1 23 6 19 -7 -1 1 24 7 20 -7 -1 7 25 8 21 -7 -1 7 26 9 22 -7 -1 1 27 10 23 5 -1 10 0 2 24 7 -1 10 28 11 25 5 -1 11 0 2 26 7 -1 10 30 12 27 5 -1 12 4 2 28 5 -1 12 0 7 29 -7 -1 12 32 13 30 -7 -1 13 33 14 32 -7 -1 1 34 15; 500 ; 1 0 1 5 2 6 4 0 7 0 5 2 0 11 0 2 12 0 3 0 0 0 0 0 0 0 0 0 0 0 0 -2 0 0 0; 8 0 4 1 2 2 8 3 2 3 2 2 2 2 2 2 2 3 2 3 3 2 3 3 8 3 2 4 2 5 2 2;PROG {

typedef st_1 : struct {
    ch1 : int;
    ch2 : int;
};

typedef st_2 : struct {
    ch21 : int;
    ch22 : int;
    ch23 : st_1;
    ch24 : int;
};

var s1 : st_1;
var s2 : st_2;

begin
    s1.ch1 := 1;
    s1.ch2 := 2;

    s2.ch21 := 21;
    s2.ch22 := 22;
    s2.ch23.ch1 := 231;
    s2.ch23.ch2 := 232;
    s2.ch24 := 24;
end
}
0 2 -1 S 7 -1 S 10 12 S 9 12 S N B 9 5 S N B N B 11 1 S N B N B 2 -1 S 7 -1 S 10 12 S 9 12 S N B 9 6 S N B N B 11 2 S N B N B 2 -1 S 7 -1 S 10 13 S 9 13 S N B 9 8 S N B N B 11 21 S N B N B 2 -1 S 7 -1 S 10 13 S 9 13 S N B 9 9 S N B N B 11 22 S N B N B 2 -1 S 7 -1 S 10 13 S 9 13 S N B 9 10 S N B 9 5 S N B N B 11 231 S N B N B 2 -1 S 7 -1 S 10 13 S 9 13 S N B 9 10 S N B 9 6 S N B N B 11 232 S N B N B 2 -1 S 7 -1 S 10 13 S 9 13 S N B 9 11 S N B N B 11 24 S N B N B N B N B N B N B N B N B N B N ; 0 3 int -1 1 5 float -1 2 4 char -1 3 4 bool -1 4 4 st_1 -1 5 3 ch1 -1 6 3 ch2 -1 7 4 st_2 -1 8 4 ch21 -1 9 4 ch22 -1 10 4 ch23 -1 11 4 ch24 -1 12 2 s1 -1 13 2 s2 -1; 0 2 -1 0 0 1 1 2 -1 0 0 1 2 2 -1 0 0 1 3 2 -1 0 0 1 4 -3 -1 0 0 2 7 -3 -1 0 7 5 12 5 -1 0 4 2 13 5 -1 0 7 4; 500 ; 2 5 0 0 6 0 1 4 8 0 0 9 0 1 10 4 2 11 0 4; 9 0;PROG {

typedef x : struct {
        ch1 : int;
        ch2 : int;
};
//typedef x : array[0..1]of int;

//function x() return void {
//begin
//end
//};

procedure x() {
begin
end
};

var x : x;
//var x : int;
begin
end
}
PROG {

typedef tab : array [0..10] of int;
typedef tab2 : array [0..2, 0..1] of int;
typedef tab3 : array [0..1, 0..1, 0..1] of int;

typedef s1 : struct {
        ch1 : int;
        ch2 : int;
};
typedef tab4 : array [0..1, 0..1] of s1;

var t : tab;
var t2 : tab2;
var t3 : tab3;
var t4 : tab4;

var i : int;

begin
    t[0] := 0;
    t[1] := 1;
    t[2] := 2;
    t[3] := 3;
    t[4] := 4;
    t[5] := 5;
    t[6] := 6;
    t[7] := 7;
    t[8] := 8;
    t[9] := 9;
    t[10] := 10;

    i := 0;
    printf("Tableau 1 dimension :\n");
    while( i <= 10)
    begin
        printf("%d : %d\n", i, t[i]);
        i := i + 1;
    end

    t2[0,0] := 0;
    t2[0,1] := 1;
    t2[1,0] := 10;
    t2[1,1] := 11;
    t2[2,0] := 20;
    t2[2,1] := 21;

    t3[0,0,0] := 0;
    t3[0,0,1] := 1;
    t3[0,1,0] := 10;
    t3[0,1,1] := 11;
    t3[1,0,0] := 100;
    t3[1,0,1] := 101;
    t3[1,1,0] := 110;
    t3[1,1,1] := 111;

    t4[0,0].ch1 := 1;
    t4[0,0].ch2 := 2;
    t4[0,1].ch1 := 1;
    t4[0,1].ch2 := 2;
    t4[1,0].ch1 := 1;
    t4[1,0].ch2 := 2;
    t4[1,1].ch1 := 1;
    t4[1,1].ch2 := 2;
    t4[2,0].ch1 := 1;
    t4[2,0].ch2 := 2;
    t4[2,1].ch1 := 1;
    t4[2,1].ch2 := 2;
end

}
0 2 -1 S 7 -1 S 10 11 S 9 11 S N B 8 -1 S 11 0 S N B N B N B 11 0 S N B N B 2 -1 S 7 -1 S 10 11 S 9 11 S N B 8 -1 S 11 1 S N B N B N B 11 1 S N B N B 2 -1 S 7 -1 S 10 11 S 9 11 S N B 8 -1 S 11 2 S N B N B N B 11 2 S N B N B 2 -1 S 7 -1 S 10 11 S 9 11 S N B 8 -1 S 11 3 S N B N B N B 11 3 S N B N B 2 -1 S 7 -1 S 10 11 S 9 11 S N B 8 -1 S 11 4 S N B N B N B 11 4 S N B N B 2 -1 S 7 -1 S 10 11 S 9 11 S N B 8 -1 S 11 5 S N B N B N B 11 5 S N B N B 2 -1 S 7 -1 S 10 11 S 9 11 S N B 8 -1 S 11 6 S N B N B N B 11 6 S N B N B 2 -1 S 7 -1 S 10 11 S 9 11 S N B 8 -1 S 11 7 S N B N B N B 11 7 S N B N B 2 -1 S 7 -1 S 10 11 S 9 11 S N B 8 -1 S 11 8 S N B N B N B 11 8 S N B N B 2 -1 S 7 -1 S 10 11 S 9 11 S N B 8 -1 S 11 9 S N B N B N B 11 9 S N B N B 2 -1 S 7 -1 S 10 11 S 9 11 S N B 8 -1 S 11 10 S N B N B N B 11 10 S N B N B 2 -1 S 7 -1 S 10 15 S 9 15 S N B N B 11 0 S N B N B 2 -1 S 34 -1 S 15 16 S N B 39 -1 S N B N B 2 -1 S 6 -1 S 18 0 S 28 -1 S 10 15 S 9 15 S N B N B 11 10 S N B N B N B 2 -1 S 34 -1 S 15 17 S N B 39 -1 S 10 15 S 9 15 S N B N B 10 11 S 9 11 S N B 8 -1 S 10 15 S 9 15 S N B N B N B N B N B N B 2 -1 S 7 -1 S 10 15 S 9 15 S N B N B 16 0 S 19 -1 S 10 15 S 9 15 S N B N B 11 1 S N B N B N B N B N B N B N B 2 -1 S 7 -1 S 10 12 S 9 12 S N B 8 -1 S 11 0 S N B 11 0 S N B N B N B 11 0 S N B N B 2 -1 S 7 -1 S 10 12 S 9 12 S N B 8 -1 S 11 0 S N B 11 1 S N B N B N B 11 1 S N B N B 2 -1 S 7 -1 S 10 12 S 9 12 S N B 8 -1 S 11 1 S N B 11 0 S N B N B N B 11 10 S N B N B 2 -1 S 7 -1 S 10 12 S 9 12 S N B 8 -1 S 11 1 S N B 11 1 S N B N B N B 11 11 S N B N B 2 -1 S 7 -1 S 10 12 S 9 12 S N B 8 -1 S 11 2 S N B 11 0 S N B N B N B 11 20 S N B N B 2 -1 S 7 -1 S 10 12 S 9 12 S N B 8 -1 S 11 2 S N B 11 1 S N B N B N B 11 21 S N B N B 2 -1 S 7 -1 S 10 13 S 9 13 S N B 8 -1 S 11 0 S N B 11 0 S N B 11 0 S N B N B N B 11 0 S N B N B 2 -1 S 7 -1 S 10 13 S 9 13 S N B 8 -1 S 11 0 S N B 11 0 S N B 11 1 S N B N B N B 11 1 S N B N B 2 -1 S 7 -1 S 10 13 S 9 13 S N B 8 -1 S 11 0 S N B 11 1 S N B 11 0 S N B N B N B 11 10 S N B N B 2 -1 S 7 -1 S 10 13 S 9 13 S N B 8 -1 S 11 0 S N B 11 1 S N B 11 1 S N B N B N B 11 11 S N B N B 2 -1 S 7 -1 S 10 13 S 9 13 S N B 8 -1 S 11 1 S N B 11 0 S N B 11 0 S N B N B N B 11 100 S N B N B 2 -1 S 7 -1 S 10 13 S 9 13 S N B 8 -1 S 11 1 S N B 11 0 S N B 11 1 S N B N B N B 11 101 S N B N B 2 -1 S 7 -1 S 10 13 S 9 13 S N B 8 -1 S 11 1 S N B 11 1 S N B 11 0 S N B N B N B 11 110 S N B N B 2 -1 S 7 -1 S 10 13 S 9 13 S N B 8 -1 S 11 1 S N B 11 1 S N B 11 1 S N B N B N B 11 111 S N B N B 2 -1 S 7 -1 S 10 14 S 9 14 S N B 8 -1 S 11 0 S N B 11 0 S N B N B 9 8 S N B N B 11 1 S N B N B 2 -1 S 7 -1 S 10 14 S 9 14 S N B 8 -1 S 11 0 S N B 11 0 S N B N B 9 9 S N B N B 11 2 S N B N B 2 -1 S 7 -1 S 10 14 S 9 14 S N B 8 -1 S 11 0 S N B 11 1 S N B N B 9 8 S N B N B 11 1 S N B N B 2 -1 S 7 -1 S 10 14 S 9 14 S N B 8 -1 S 11 0 S N B 11 1 S N B N B 9 9 S N B N B 11 2 S N B N B 2 -1 S 7 -1 S 10 14 S 9 14 S N B 8 -1 S 11 1 S N B 11 0 S N B N B 9 8 S N B N B 11 1 S N B N B 2 -1 S 7 -1 S 10 14 S 9 14 S N B 8 -1 S 11 1 S N B 11 0 S N B N B 9 9 S N B N B 11 2 S N B N B 2 -1 S 7 -1 S 10 14 S 9 14 S N B 8 -1 S 11 1 S N B 11 1 S N B N B 9 8 S N B N B 11 1 S N B N B 2 -1 S 7 -1 S 10 14 S 9 14 S N B 8 -1 S 11 1 S N B 11 1 S N B N B 9 9 S N B N B 11 2 S N B N B 2 -1 S 7 -1 S 10 14 S 9 14 S N B 8 -1 S 11 2 S N B 11 0 S N B N B 9 8 S N B N B 11 1 S N B N B 2 -1 S 7 -1 S 10 14 S 9 14 S N B 8 -1 S 11 2 S N B 11 0 S N B N B 9 9 S N B N B 11 2 S N B N B 2 -1 S 7 -1 S 10 14 S 9 14 S N B 8 -1 S 11 2 S N B 11 1 S N B N B 9 8 S N B N B 11 1 S N B N B 2 -1 S 7 -1 S 10 14 S 9 14 S N B 8 -1 S 11 2 S N B 11 1 S N B N B 9 9 S N B N B 11 2 S N B N B N B N B N B N B N B N B N B N B N B N B N B N B N B N B N B N B N B N B N B N B N B N B N B N B N B N B N B N B N B N B N B N B N B N B N B N B N B N B N B N B N ; 0 3 int -1 1 5 float -1 2 4 char -1 3 4 bool -1 4 3 tab -1 5 4 tab2 15 6 4 tab3 -1 7 2 s1 -1 8 3 ch1 -1 9 3 ch2 16 10 4 tab4 -1 11 1 t -1 12 2 t2 -1 13 2 t3 -1 14 2 t4 -1 15 1 i -1 16 25 "Tableau 1 dimension :\n" -1 17 11 "%d : %d\n" -1; 0 2 -1 0 0 1 1 2 -1 0 0 1 2 2 -1 0 0 1 3 2 -1 0 0 1 4 3 -1 0 0 11 5 3 -1 0 4 6 6 3 -1 0 10 8 7 -3 -1 0 18 2 10 3 -1 0 25 8 11 5 -1 0 4 2 12 5 -1 0 5 13 13 5 -1 0 6 19 14 5 -1 0 10 27 15 5 -1 0 0 35; 500 ; 1 0 0 10 2 0 0 2 0 1 3 0 0 1 0 1 0 1 2 8 0 0 9 0 1 2 7 0 1 0 1; 36 0;PROG{
var x : int;
begin
printf("Quel est votre age ? ");
scanf("%d",x);
if(x>=0 && x<=6) then
    begin
    printf("Quel bebe !\n");
    end
else if(x>6 && x<=10) then
    begin
    printf("Le bebe grandit !\n");
    end
else
    begin
    printf("Quelle evolution !\n");
    end
}
PROG{
var a : int;
var b : int;
var c : float;
var caractere : char;
begin
printf("Vous avez quel age jeunes gens  ? ");
scanf("[%d %d]",a,b);
printf("Donc vous avez %d et %d ans",a,b);
end
}
PROG {

var x : int;

function x() return int {
    var x : int;
    begin
    x := 2;;
    return x;
    end
};


begin
x := 1 + x();
if( 2 == 3 && ( 3 > 4 || 4 > 3) ) then
    begin
    ;
    end
end
}
PROG {
// Les structtures du programme.
typedef tableau : array[0..10] of int;

// Les variables
var t : tableau;
var i : int;

// Les fonctions :
procedure afficher() {
var i : int;
begin
    i := 0;
    printf("[");
    while(i < 10)
    begin
        printf("%d, ", t[i]);
        i := i + 1;
    end
    printf("]\n");
end
};
procedure remplir() {
var i : int;
begin
    i := 0;
    while(i < 10) begin
        t[i] := 10 - i;
        i := i + 1;
    end
end
};
function minimum(i:int) return int {
var m : int;
begin
    printf("minimum(%d)\n", i);
    m := i;
    while(i < 10) begin
        if(t[i] < t[m]) then
        begin
            m := i;
        end

        i := i + 1;
    end

    return m;
end
};
function triSelection() return void {
//var i : int;
var temps : int;
var m : int;
begin
    i := 0;
    while( i < 9) begin
        //printf("\ntour %d :", i);
        afficher();
        printf("appel de minimum avec i=%d\n", i);
        m := minimum(i);
        temps := t[i];
        t[i] := t[m];
        t[m] := temps;
        i := i + 1;
    end
end
};

// corps de la region principale
begin
    remplir();
    printf("Voici le tableau : ");
    afficher();
    printf("On le trie : ");
    triSelection();
    afficher();
end
}
